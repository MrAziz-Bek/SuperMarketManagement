@inject IGetTodayTransactionsUseCase GetTodayTransactionsUseCase

@if (transactions is not null)
{
    <table class="table">
    <thead>
        <tr>
            <th>Cashier Name</th>
            <th>Product Name</th>
            <th>Date Time</th>
            <th>Quantity Before</th>
            <th>Quantity Sold</th>
            <th>Quantity After</th>
            <th>Sold Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.CashierName</td>
                    <td>@transaction.ProductName</td>
                    <td>@transaction.TimeStamp.ToString("MM/dd hh:mm")</td>
                    <td>@transaction.beforeQuantity</td>
                    <td>@transaction.soldQuantity</td>
                    <td>@(transaction.beforeQuantity - transaction.soldQuantity)</td>
                    <td>@(string.Format("{0:c}", transaction.soldQuantity * transaction.Price))</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<Transaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionsUseCase.Execute(cashierName);
        StateHasChanged();
    }
}
