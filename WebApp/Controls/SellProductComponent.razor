@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell is not null)
{
    if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Name</label>
            <input class="form-control" type="text" readonly value="@productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class="form-control" id="price" type="text" readonly value="$@productToSell.Price" />
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>
}

@code{
    private Product productToSell;

    private string errorMessage;

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The cashier's name is missing.";
            return;
        }

        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);

        if (productToSell.Quantity < 1)
        {
            errorMessage = $"The quantity has to be greater than 0.";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value);
        }
        else
        {
            errorMessage = $"{product.Name} has only {product.Quantity} left. It is not enough.";
        }
    }

    protected override void OnParametersSet()
    {
        if (SelectedProduct is not null)
        {
            productToSell = new Product()
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else
        {
            productToSell = null;
        }
    }
}