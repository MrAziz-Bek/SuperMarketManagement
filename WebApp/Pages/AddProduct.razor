@page "/addproduct"

@inject NavigationManager NavigationManager
@inject IAddProductUseCase AddProductUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase

<h3>Add Product</h3>

@if (product is not null)
{
<EditForm Model="product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Name</label>
        <InputText class="form-control" id="name" @bind-Value="product.Name"></InputText>
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <select id="category" @bind="product.CategoryId" class="form-control">
            <option selected value="0"></option>
            @foreach (var cat in Categories)
            {
                <option value="@cat.CategoryId">@cat.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber class="form-control" id="price" @bind-Value="product.Price" @bind-Value:format="F2"></InputNumber>
    </div>

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber class="form-control" id="qty" @bind-Value="product.Quantity"></InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-danger" @onclick="OnCancel">Cancel</button>
</EditForm>
}

@code {
    private Product product;

    private IEnumerable<Category> Categories;

    protected override void OnInitialized()
    {
        product = new Product();
        Categories = ViewCategoriesUseCase.Execute();
    }

    private void OnValidSubmit()
    {
        AddProductUseCase.AddProduct(product);
        NavigationManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}