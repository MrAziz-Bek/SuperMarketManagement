@page "/products"

@inject NavigationManager NavigationManager
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase

<h3>Products</h3>

@if (Products is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var Product in Products)
            {
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(Product.CategoryId.Value).Name</td>
                    <td>@Product.Name</td>
                    <td>@(Math.Round(Product.Price.Value, 2))</td>
                    <td>@Product.Quantity</td>
                    <td>
                        <button type="button" class="btn btn-info" @onclick="@(() => OnEditProduct(Product))">Edit</button>
                        &nbsp;
                        <button type="submit" class="btn btn-danger" @onclick="@(() => OnDeleteProduct(Product.ProductId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<button type="submit" class="btn btn-primary" @onclick="OnClickAddProduct">Add Product</button>


@code {
    private IEnumerable<Product> Products;

    protected override void OnInitialized()
    {
        LoadProducts();
    }

    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    private void OnEditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }

    private void OnDeleteProduct(int productId)
    {
        DeleteProductUseCase.Execute(productId);
        LoadProducts();
    }

    private void LoadProducts()
    {
        Products = ViewProductsUseCase.Execute();
    }
}